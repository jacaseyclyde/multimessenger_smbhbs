"""Module documentation."""# Importsimport sysimport multiprocessing as mpimport numpy as npimport astropy.constants as constfrom tqdm.autonotebook import tqdm#import os# Global variables# Class declarationsclass DifferentialBinaryPopulation:    def __init__(self, model):        self.model = model        self.population = None        self.pop_axes = None        # self.strain_norm = ((4 * const.G ** (5 / 3))        #                     / (3 * (np.pi ** (1 / 3)) * (const.c ** 2)))        # self.ranges = ranges        # self.ndim = np.shape(ranges)[0]    def _sample(self, coords, size=32, verbose=True, **params):        ndims = np.shape(coords)[0]        # self.pop_axes = np.linspace(*np.transpose(ranges), num=size).T        self.pop_axes = coords        grids = np.meshgrid(*self.pop_axes, indexing='ij')        if verbose:            self.population = [self.model(*args) for args                               in tqdm(zip(*np.reshape(grids, (ndims, -1))),                                       total=len(grids[0].ravel()))]        else:            self.population = [self.model(*args) for args                               in zip(*np.reshape(grids, (ndims, -1)))]        self.population = np.reshape(self.population,                                     tuple(np.append([np.shape(grids[0])], -1)))        self.population = np.squeeze(self.population)        return self.population#         # mm, zz, qq = np.meshgrid(log_m_bh_range, z_range, q_range, indexing='ij')#         with mp.Pool(mp.cpu_count()) as p:#             self.population = list(p.starmap(self.model,#                              zip(mm.ravel(), zz.ravel(), qq.ravel())),#                       total=len(mm.ravel()))# # differential_bhb_population = np.reshape(differential_bhb_population, np.repeat(mm[..., np.newaxis], n_samples, axis=-1).shape)    def strain(self, f, ranges, grid_size=32, **params):        self.population = self._sample(ranges=ranges, size=grid_size, **params)        strain = np.sqrt(np.trapz(self.population))        return strain    def generate_discrete(self):        return 0# Function declarationsdef main():    args = sys.argv[1:]    if not args:        print('usage: [--flags options] [inputs] ')        sys.exit(1)# Main bodyif __name__ == '__main__':    main()